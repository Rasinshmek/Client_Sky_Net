/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_skynet;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;

/**
 *
 * @author alpha
 */
public class Ground extends javax.swing.JFrame implements KeyListener {

    /**
     * Creates new form Ground
     */
    boolean up = false;
    boolean down = false;
    boolean left = false;
    boolean right = false;

    public Ground() {
        initComponents();
        this.addKeyListener(this);
        this.setFocusable(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("IP");

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLabel1)))
                .addGap(0, 229, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addContainerGap(206, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Настройки");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Настройки ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jButton1.setVisible(false);
        jTextField1.setVisible(false);
        this.setFocusable(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        new Settings();      
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed
    private void up() throws IOException {
        jLabel1.setText("UP");
        client(jTextField1.getText(), "toFo");
    }

    private void down() throws IOException {
        jLabel1.setText("DOWN");
        client(jTextField1.getText(), "toBa");
    }

    private void left() throws IOException {
        jLabel1.setText("LEFT");
        client(jTextField1.getText(), "toLe");
    }

    private void right() throws IOException {
        jLabel1.setText("RIGHT");
        client(jTextField1.getText(), "toRi");
    }

    private void up_left() throws IOException {
        jLabel1.setText("UP_LEFT");
        client(jTextField1.getText(), "toFoLe");
    }

    private void up_right() throws IOException {
        jLabel1.setText("UP_RIGHT");
        client(jTextField1.getText(), "toFoRi");
    }

    private void down_left() throws IOException {
        jLabel1.setText("DOWN_LEFT");
        client(jTextField1.getText(), "toBaLe");
    }

    private void down_right() throws IOException {
        jLabel1.setText("DOWN_RIGHT");
        client(jTextField1.getText(), "toBaRi");
    }

    private void clear() throws IOException {
        jLabel1.setText("");
        client(jTextField1.getText(), "toStop");
    }

    private void client(String IP, String STR) throws IOException {
        try {
            //        Socket socket = new Socket("localhost", (7000));
//        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
//        writer.println("HARD: "+STR);
//        writer.close();
//        socket.close();
            send("HARD: " + STR, 7000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected void send(String str, int port) throws InterruptedException {

// запускаем подключение сокета по известным координатам и нициализируем приём сообщений с консоли клиента      
        try (Socket socket = new Socket("192.168.0.103", port);
                DataOutputStream oos = new DataOutputStream(socket.getOutputStream());) {

            System.out.println("Client connected to socket.");

// проверяем живой ли канал и работаем если живой           
// данные появились - работаем                      
            String clientCommand = str;

// пишем данные с консоли в канал сокета для сервера            
            oos.writeUTF(clientCommand);
            oos.flush();

        } catch (Exception e) {
            e.printStackTrace();
        } 

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ground.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ground.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ground.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ground.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ground().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_W:
            case KeyEvent.VK_UP: {
                try {
                    up = true;
                    if (up && left == true) {
                        up_left();
                    } else if (up && right == true) {
                        up_right();
                    } else if (up && down == true) {
                    } else if (left && right == true) {
                    } else {
                        up();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            }

            case KeyEvent.VK_S:
            case KeyEvent.VK_DOWN: {
                try {
                    down = true;
                    if (down && left == true) {
                        down_left();
                    } else if (down && right == true) {
                        down_right();
                    } else if (up && down == true) {
                    } else if (left && right == true) {
                    } else {
                        down();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case KeyEvent.VK_D:
            case KeyEvent.VK_RIGHT: {
                try {
                    right = true;
                    if (down && right == true) {
                        down_right();
                    } else if (up && right == true) {
                        up_right();
                    } else if (up && down == true) {
                    } else if (left && right == true) {
                    } else {
                        right();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case KeyEvent.VK_A:
            case KeyEvent.VK_LEFT: {
                try {
                    left = true;
                    if (up && left == true) {
                        up_left();
                    } else if (down && left == true) {
                        down_left();
                    } else if (up && down == true) {
                    } else if (left && right == true) {
                    } else {
                        left();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_W:
            case KeyEvent.VK_UP: {
                up = false;
                try {
                    clear();
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case KeyEvent.VK_S:
            case KeyEvent.VK_DOWN: {
                down = false;
                try {
                    clear();
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            }
            case KeyEvent.VK_D:
            case KeyEvent.VK_RIGHT: {
                right = false;
                try {
                    clear();
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            }
            case KeyEvent.VK_A:
            case KeyEvent.VK_LEFT: {
                left = false;
                try {
                    clear();
                } catch (IOException ex) {
                    Logger.getLogger(Ground.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            }
        }

    }
}
